<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>ManWithBear</title><description>Developer notes around iOS / Swift / Programming</description><link>https://manwithbear.com</link><language>en</language><lastBuildDate>Sat, 4 Sep 2021 00:29:04 +0200</lastBuildDate><pubDate>Sat, 4 Sep 2021 00:29:04 +0200</pubDate><ttl>250</ttl><atom:link href="https://manwithbear.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://manwithbear.com/articles/2021-09-03-fighting-trees-pet-projject-series-1</guid><title>Fighting trees - Pet project series - 1/x</title><description></description><link>https://manwithbear.com/articles/2021-09-03-fighting-trees-pet-projject-series-1</link><pubDate>Fri, 3 Sep 2021 04:20:00 +0200</pubDate><content:encoded><![CDATA[<h1>Fighting trees - Pet project series - 1/x</h1><p>Wow, the first week is behind us. That was fast.</p><p>Let's quickly go over the first week:</p><p>Right after publishing the article I pull Playground and start <s>blasting</s> coding.</p><h2>Identifier</h2><p>One thing I love in Swift are small wrapper types.</p><p>For example <code>Identifier</code> wrapper</p><pre><code><span class="keyword">struct</span> Identifier&lt;T, Raw: <span class="type">Hashable</span>&gt;: <span class="type">RawRepresentable</span>, <span class="type">Equatable</span>, <span class="type">Hashable</span> {
    <span class="keyword">typealias</span> RawValue = <span class="type">Raw</span>
    <span class="keyword">let</span> rawValue: <span class="type">Raw</span>
    <span class="keyword">init</span>(rawValue: <span class="type">RawValue</span>) {
        <span class="keyword">self</span>.<span class="property">rawValue</span> = rawValue
    }
}

<span class="keyword">class</span> MagicPony {
    <span class="keyword">typealias</span> ID = <span class="type">Identifier</span>&lt;<span class="type">MagicPony</span>, <span class="type">UUID</span>&gt;
    <span class="keyword">let</span> id = <span class="type">ID</span>(rawValue: <span class="type">UUID</span>())
}
</code></pre><p>By wrapping your string / uuid ids into type specific wrappers you let swift type system prevent mistakes like putting <code>User.ID</code> into <code>Admin.ID</code> instead of relying on developers.</p><p>Side note: I found out that Swift has built-in <code>Identifiable</code> and <code>ObjectIdentifier</code>.<br><code>ObjectIdentifier</code> applies to classes only and does not persist between app runs. So it makes it unusable for me right now.</p><h2>Licenses</h2><p>For a longer period of time I was almost always ignoring licenses of libraries and software that I use / write. This time before uploading repo I decided to get a better picture of the licensing world. And hell it's complicated! Kudos to Em Lazer-Walker for her article: <a href="https://blog.lazerwalker.com/cortado/2015/07/05/open-source-licenses.html">Picking an OSS license for your iOS app</a> After hours of reading the BSD vs GPL holy wars, that was a breath of fresh air.</p><p>Right now I do not expect someone else to contribute to the project and honestly, even use it at all. So I decided to go with GPLv3 as it's not AppStore friendly (not like it will prevent someone from releasing it under their name, but I would be in the right, sadge). In future I may change the license of the project or release part of it under a different license like MIT or similar. If you are interested in using something from the project, do not hesitate to reach out.</p><p>Okey, okey, back to interesting stuff - programming.</p><h2>SPM</h2><p>For this project I want to stick with Swift Package Manager as much as possible. That's where the first disappointment awaited me. Although SPM allows you to create executables, it still cannot produce iOS apps. After a little research I stumble on this thread: <a href="https://forums.swift.org/t/use-spm-to-build-ios-target/25436">Use SPM to build iOS target - Using Swift - Swift Forums</a></p><p>tl;dr;</p><p><strong>Swift ≠ iOS Development</strong></p><p>Although it would be cool to write apps using only SPM, building an iOS app requires a lot of additional steps, like copying resources / signing / etc, that are not related to Swift in any way. And it makes total sense.</p><h2>Overengineering is our bread and butter</h2><p>Remember when I said "no overengineering"? Keep it simple?<br>Easier said than done!</p><p>I just found myself writing <code>TopologicalOrderSequence</code> after understanding that <code>TopologicalIterator</code> is not enough for me.<br>Do I really need it? <strong>No.</strong><br>Should I do it right now? <strong>No.</strong><br>Is this the best solution for my problem? <strong>Most likely no.</strong><br>But here I am.</p><p>It sounds interesting. It sounds complicated. It sounds "engineery" and "cool".<br>And I think it's a problem with developers in general.<br>No one gonna brag to friends / colleagues about one more function they wrote, but wrap it in fancy words and uncommon technologies and now we’re talking!</p><h2>Complexity of init</h2><p>While writing <code>Engine</code> I start preprocessing data and recipes in <code>init</code> for simpler future calculations. Now looking at it, I would say it's a bad idea.<br>A lot of developers expect <code>init</code> to be an <code>O(1)</code> operation, which is not always the case. How many times have I heard: "I'm just creating one object here, it's fine", to later find out that the program spends seconds (!!) in this <code>init</code>.<br>It may sound like pre-emptive optimizations, and honestly in 99% it is, but I consider it good practise and part of consistency.</p><h2>Recursion vs loops</h2><p>During implementation of <code>add(ingredient:...)</code> I notice that I unintentionally prefer non-recursive algorithms over recursive ones. A possible reason is without having limits on the amount of ingredients, we cannot guarantee that recursion will fit in the available stack. Again, it's a case of "better safe than sorry".<br>Most compilers are smart enough to apply tail-recursion optimizations, so in most cases it's not something you should worry about. But not in my case.</p><h2>First "real" issue</h2><p>Recipes planning went very well until I stumbled on recipes that produce not 1 thing but multiple (remember 4 nails from 1 iron ore?).<br>Right now if we have a recipe: <em>2X -&gt; 1Y</em>, when the user adds 1Y in inventory, the app will add virtual 2X as well, because it's X that already "used" for Y.<br>If the recipe is reverted: <em>1X -&gt; 2Y</em>, when user adds 1Y in inventory, it's not enough for full recipe so virtual X's are not added.<br>So far so good.<br>But what if the user adds 1Y again? If we look at the transaction outside of context, it's exactly as before, no X to add. With context we have 1Y from before, that gives us 2Y in total and 1 virtual X to give.</p><p>To solve this calculation issue we could go 2 ways:</p><ol><li>Split user inventory between "real" and "virtual".<br/> Whenever the user adds an item to inventory, we update "real" inventory, flush "virtual" inventory and recalculate it from "real".<br/> I don't really like this approach, because it feels "too heavy" to recalculate from inventory on each update instead of doing smart half tree recalculations.</li></ol><ol start="2"><li>Instead of recalculation inventory, recalculate requirements (<code>needed - whats_in_inventory</code>).<br/> This could lead us to a situation when the user has more subproducts that are needed and can be really confusing.</li></ol><p>Because of how hard it is to properly communicate to the user what's going on in the 2nd case (even I myself do not fully understand it yet), I decided to go with the 1st approach.</p><h2>What to expect next?</h2><p>Currently I don't like how <code>ingredient.id</code> is used everywhere and probably would do something with that next week.</p><p>If you missed the first post of this series, I got you: <a href="https://manwithbear.com/articles/2021-08-27-starting-pet-project-series-0/">Starting Pet project series 0/x | ManWithBear</a></p><p>See ya!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://manwithbear.com/articles/2021-08-27-starting-pet-project-series-0</guid><title>Starting Pet project series 0/x</title><description></description><link>https://manwithbear.com/articles/2021-08-27-starting-pet-project-series-0</link><pubDate>Fri, 27 Aug 2021 23:50:00 +0200</pubDate><content:encoded><![CDATA[<h1>Starting Pet project series 0/x</h1><p>For the last couple years I wanted to start a pet project, where I could play around with different technologies and practices.</p><p>So far it was "successful". Most of my attempts ended at the ideas stage. For two of them I went as far as creating GitHub repo. And just one project I'm restarting every 5 months and losing interest in a week.</p><p>Until today.</p><p>This is it.</p><p>This is THE PROJECT.</p><h2>Why?</h2><p>You would say: <em>"But Denis, how is it different from all your previous pet projects?"</em><br>Good question. This time I have a million dollars idea! I will write weekly articles about the project. Yep! That simple. This kills two birds with one stone:</p><ol><li>I would be required to continue working on the project, because of the fear of being shamed by a random dude on the internet, who would send me something like: <em>"Hey u lazy bastard where r updates?"</em> You know what I mean.</li></ol><ol start="2"><li>I will finally start writing blog posts that I promised to my English tutor 2 months ago (Sorry Brian).</li></ol><h2>Rules</h2><p>First let's define a set of ground rules for the project:</p><ol><li>Every Friday I publish a status update post.<br/> I would argue my decisions, findings and experience. Check it out, maybe you will find something interesting or new for you. Or the other way around, you will find mistakes on my side (feel free to get in touch in this case, highly appreciated).</li></ol><ol start="2"><li>YOLO Driven Development.<br/> No predefined architectures. Open minded approach. Solve problems when they appear. No overthinking and overengineering.</li></ol><ol start="3"><li>Start with UIKit with plans for SwiftUI in future.<br/> For too long I was delaying giving a chance to SwiftUI. This project is not an exception.</li></ol><ol start="4"><li>???</li></ol><ol start="5"><li>PROFIT</li></ol><p>Uh, we got that far and not even a single word about the project itself.</p><h2>Preamble</h2><p>I enjoy crafting games. They give you a clear goal and a path to achieve this goal. But as your production tree grows it becomes difficult to keep track of everything that needs to be crafted, primitives to collect and small tasks to perform. The production tree can be dozens and dozens of intermediate products deep.</p><p>Let me show you an example:<br>To fix a broken bridge I need: 4 wooden planks and 2 nails. While I'm here I might as well build a mailbox that requires 2 wooden logs and 1 iron bar.<br>Processing 1 wooden log gives you 2 wooden planks. From 1 iron bar you get 4 nails.<br>So in total I need: 4 wooden logs and 2 iron bars.<br>But I already have 2 wooden planks and 1 nail from a previous crafting project.<br>Adding them into the equation results in 3 wooden logs and still 2 iron bars.</p><p>Feeling the weight of math already, huh?</p><h2>What I would love to see in the app</h2><p>Idea of the project is to take something that I could do in Excel in an hour and spend a couple months writing an app for it. Sounds like classic IT, isn't it?<br>Jokes aside. What I would love to see in the app:</p><ol><li>Add / edit / remove ingredients.<br/> An ingredient is a simple building block. Everything is an ingredient.</li></ol><ol start="2"><li>Define / edit / remove recipe.<br/> Recipe defines the relationship between one ingredient (product of recipe) and a set of other ingredients. For now for simplicity we would ignore possible recipe loops (when A made from B, but B could be made from A as well) and assume our production pipeline is <a href="https://en.wikipedia.org/wiki/Tree_%28graph_theory%29#Rooted_tree">a rooted tree</a>.</li></ol><ol start="3"><li>Create / edit / remove projects.<br/> A project is a set of final recipes to perform.</li></ol><ol start="4"><li>Project summary.<br/> Displays all intermediate recipes that need to be performed to finish the project. Allows you to specify which ingredients you already prepared and helps track progress.<br/> <em>Side note: to properly calculate ingredients amount with possible duplication in a tree branches, we could merge duplication by transforming a tree into <a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph">a directed acyclic graph</a> and then sort nodes in <a href="https://en.wikipedia.org/wiki/Topological_sorting">topological order</a> (Have I mentioned that I'm fascinated by graphs theory?)</em></li></ol><h2>Future?</h2><p>That would do it for now. I already have multiple ideas to progress from that point (share a recipes library, widgets, group activity), but let's hold our horses. One step at the time.</p><p>Hope to see you next week.</p><p>If for some reason you want to check out my day-to-day progress, feel free to come by the project repo: <a href="https://github.com/ManWithBear/TheProject">ManWithBear/TheProject · GitHub</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://manwithbear.com/articles/2018-04-27-modal-in-uitabbarcontroller</guid><title>Modal screen inside UITabBarController</title><description></description><link>https://manwithbear.com/articles/2018-04-27-modal-in-uitabbarcontroller</link><pubDate>Fri, 27 Apr 2018 01:34:00 +0200</pubDate><content:encoded><![CDATA[<p>Let's say you want to present <code>SearchViewController</code> modally over current controller, which is inside of <code>UITabBarController</code>.</p><pre><code><span class="keyword">func</span> showSearch() {
    <span class="call">present</span>(<span class="type">SearchVC</span>(), animated: <span class="keyword">true</span>, completion: <span class="keyword">nil</span>)
}
</code></pre><p>Does what it should. But presented controller will overlap with <code>UITabBar</code>, so you can't switch between tabs at this point. To resolve this issue:</p><pre><code><span class="keyword">func</span> showSearch() {
    <span class="comment">// uncomment this one if your controller not wrapped in UINavigationController
    // definesPresentationContext = true</span>
    <span class="keyword">let</span> search = <span class="type">SearchVC</span>()
    search.<span class="property">modalPresentationStyle</span> = .<span class="dotAccess">currentContext</span>
    <span class="call">present</span>(search, animated: <span class="keyword">true</span>, completion: <span class="keyword">nil</span>)
}
</code></pre><p><code>search.modalPresentationStyle = .currentContext</code> this line says to UIKit, that it needs to find the first UIViewController, that defines a context, in stack and show modal in this context. By default <code>UINavigationController</code> and <code>UITabBarController</code> have this property as <code>true</code>.</p><p>But now we lose ability to pop to root controller in stack by tapping on selected <code>UITabItem</code>. Here we getting help from <code>UITabBarControllerDelegate</code>:</p><pre><code><span class="keyword">func</span> tabBarController(<span class="keyword">_</span> tabBarController: <span class="type">UITabBarController</span>, shouldSelect viewController: <span class="type">UIViewController</span>) -&gt; <span class="type">Bool</span> {
    <span class="keyword">guard</span> tabBarController.<span class="property">selectedViewController</span> == viewController <span class="keyword">else</span> { <span class="keyword">return true</span> }
    viewController.<span class="call">dismiss</span>(animated: <span class="keyword">true</span>, completion: <span class="keyword">nil</span>)
    <span class="keyword">return true</span>
}
</code></pre><p>Work like a charm!<br>But if you present modal from 2+ screen in navigation stack, you will get warnings in console:<br><code>Unbalanced calls to begin/end appearance transitions for &lt;TBModal.MiddleVC: 0x7fad0d417b90&gt;.</code></p><p>What's going on?<br><code>search.modalPresentationStyle = .currentContext</code> remove presenter's view after modal controller presentation, and put it back right before dismiss. But in same time <code>UINavigationController</code> removing this view from stack in <code>popToRootViewController</code> call (or some equivalent used by UIKit). So you adding and removing view at same time.<br><br>Easy fix: <code>search.modalPresentationStyle = .overCurrentContext</code><br>Here we say: "Show this modal over a current context, but don't remove presenter's view from hierarchy"</p>]]></content:encoded></item><item><guid isPermaLink="true">https://manwithbear.com/articles/2018-04-20-writing-test-framework</guid><title>XCTest import in own testing framework</title><description></description><link>https://manwithbear.com/articles/2018-04-20-writing-test-framework</link><pubDate>Fri, 20 Apr 2018 11:41:00 +0200</pubDate><content:encoded><![CDATA[<h2>Problem</h2><p>If you would like to create framework, which will be used only in unit tests. At one moment you will need to import <code>XCTest</code>. But Xcode will give you awesome error:</p><pre><code><span class="string">"Cannot load underlying module for XCTest"</span>
</code></pre><h2>Reason</h2><p>As I understand, Xcode doesn't know that your framework will be imported only in test target, so it can't find <code>XCTest</code> framework in "normal" framework location.</p><h2>Solution</h2><p>Add to your config file:</p><pre><code><span class="type">OTHER_LDFLAGS</span> = -weak_framework <span class="type">XCTest</span> -<span class="keyword">weak</span>-lswiftXCTest
<span class="type">FRAMEWORK_SEARCH_PATHS</span> = $(<span class="type">DEVELOPER_FRAMEWORKS_DIR</span>) $(<span class="type">PLATFORM_DIR</span>)/<span class="type">Developer</span>/<span class="type">Library</span>/<span class="type">Frameworks
ENABLE_BITCODE</span> = <span class="type">NO</span> <span class="comment">// XCTest doesn't support bitcode, why would it?</span>
</code></pre><p>It will provide location for <code>XCTest</code> framework and link it to your project.</p>]]></content:encoded></item></channel></rss>